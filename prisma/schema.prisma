// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prestador {
  id             String   @id @default(uuid())
  nome           String
  cpf_cnpj       String
  celular        String
  sexo           String
  cidade         String
  uf             String
  observacao     String
  url_foto       String   @default("https://avatars.dicebear.com/v2/female/f8a3f576694bbe6737b16d4b3de5aa09.svg")
  created_at     DateTime @default(now())
  tipo_categoria String
  id_user        String
}

model Planos {
  id    String @id @default(uuid())
  valor String
  tipo  String
}

model Prestador_Ativo {
  id          String @id @default(uuid())
  id_user     String
  data_inicio String
  data_fim    String
  tipo_plano  String
}

model Comentarios_Prestador {
  id                String   @id @default(uuid())
  id_prestador      String
  nome              String
  celular           String
  titulo_comentario String
  comentario        String
  nota              Int
  data              DateTime @default(now())
}

model Tipo_Categoria {
  id                  String @id @default(uuid())
  descricao_categoria String
}

model Foto_Prestador {
  id           String @id @default(uuid())
  id_prestador String
  url_foto     String
}

model Feedback {
  id         String @id @default(uuid())
  nome       String
  comentario String
}

model Feedback_Prestador {
  id         String @id @default(uuid())
  nome       String
  comentario String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
