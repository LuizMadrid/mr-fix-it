// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prestador {
  id         String   @id @default(uuid())
  nome       String
  cpf_cnpj   String
  celular    String
  cidade     String
  uf         String
  observacao String
  created_at DateTime @default(now())
  // conta_ativa Prestador_Ativo[]
  // pontuacoes  Pontuacao_Prestador[]
  id_user    String
  user       User     @relation(fields: [id_user], references: [id])
}

model Prestador_Ativo {
  id                         String   @id @default(uuid())
  id_prestador               String
  // conta_ativa                Prestador @relation(fields: [id_prestador], references: [id])
  data_hora_ultima_alteracao DateTime @default(now())
}

model Pontuacao_Prestador {
  id           String @id @default(uuid())
  id_prestador String
  // prestador    Prestador @relation(fields: [id_prestador], references: [id])
  id_cliente   String
  // cliente      Cliente   @relation(fields: [id_cliente], references: [id])
  pontuacao    String
}

model Cliente {
  id              String   @id @default(uuid())
  nome            String
  cpf_cnpj        String
  idade           Int
  sexo            String
  data_nascimento DateTime
  email           String
  senha           String
  celular         String
  endereco        String
  cidade          String
  uf              String
  created_at      DateTime @default(now())
  // clientes        Pontuacao_Prestador[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  prestadores   Prestador[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
